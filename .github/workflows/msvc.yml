name: Visual C++

on:
  workflow_dispatch:
    inputs:
      tcltag:  # User input for selecting Tcl tag
        description: 'Tcl version'
        required: true
        type: choice
        options:
          - '["main"]'
          - '["core-8-6-13"]'
          - '["core-8-6-13", "main"]'
        default: '["core-8-6-13", "main"]'
      osver:  # User input for selecting OS
        description: 'OS version'
        required: true
        type: choice
        options:
          - '["windows-latest"]'
          - '["windows-2022"]'
          - '["windows-2019"]'
          - '["windows-2019", "windows-2022"]'
        default: '["windows-latest"]'
      arch:
        description: 'x86 and/or x64'
        required: false
        type: choice
        options:
          - '["x64"]'
          - '["x86"]'
          - '["x64", "x86"]'
        default: '["x64"]'
      dotest: # Whether tests should be run
        description: 'Run tests as well'
        required: false
        default: true
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        os: ${{ fromJSON(github.event.inputs.osver) }}
        tclbranch: ${{ fromJSON(github.event.inputs.tcltag) }}
        arch: ${{ fromJSON(github.event.inputs.arch) }}
    runs-on: ${{ matrix.os }}
    steps:
    # Note msvc defaults to 64-bit
    - name: Init MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Setup Tcl
      id: tcl-setup-step
      uses: apnadkarni/tcl-setup@v1
      with:
        tcl-osver: ${{ matrix.os }}
        tcl-branch: ${{ matrix.tclbranch }}
        tcl-arch: ${{ matrix.arch }}
        tcl-toolchain: 'vc'

    - name: Install libffi
      shell: cmd
      run: |
        %VCPKG_INSTALLATION_ROOT%\vcpkg install libffi:${{ matrix.arch }}-windows-static-md

    - name: Cache dyncall
      id: dyncall-msvc-cache
      uses: actions/cache@v4
      with:
        path: C:/dyncall/msvc/${{ matrix.arch }}
        key: ${{ runner.os }}-${{ matrix.os}}-dyncall-msvc-${{ matrix.arch }}

    - name: Install dyncall
      if: steps.dyncall-msvc-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        curl https://dyncall.org/r1.4/dyncall-1.4.zip --output dyncall-1.4.zip
        7z x dyncall-1.4.zip
        cd dyncall-1.4
        mkdir build-msvc-${{ matrix.arch }}
        cd build-msvc-${{ matrix.arch }}
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:\dyncall\msvc\${{ matrix.arch }} -G"NMake Makefiles" ..
        cd ..
        cmake --build build-msvc-${{ matrix.arch }} --config Release
        cmake --build build-msvc-${{ matrix.arch }} --config Release --target install

    - name: Checkout tcl-cffi
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Make with libffi
      shell: cmd
      run: |
        cd win
        nmake /f makefile.vc INSTALLDIR=${{ env.TCLDIR }} EXTDIR=%VCPKG_INSTALLATION_ROOT%\installed\${{ matrix.arch }}-windows-static-md realclean
        nmake /f makefile.vc INSTALLDIR=${{ env.TCLDIR }} EXTDIR=%VCPKG_INSTALLATION_ROOT%\installed\${{ matrix.arch }}-windows-static-md

    - name: Test with libffi
      if: github.event.inputs.dotest
      shell: cmd
      run: |
        cd win
        nmake /f makefile.vc INSTALLDIR=${{ env.TCLDIR }} EXTDIR=%VCPKG_INSTALLATION_ROOT%\installed\${{ matrix.arch }}-windows-static-md test
      env:
        ERROR_ON_FAILURES: 1

    - name: Make with dyncall
      shell: cmd
      run: |
        cd win
        nmake /f makefile.vc OPTS=dyncall INSTALLDIR=${{ env.TCLDIR }} EXTDIR=c:\dyncall\msvc\${{ matrix.arch }} realclean
        nmake /f makefile.vc  OPTS=dyncall INSTALLDIR=${{ env.TCLDIR }} EXTDIR=c:\dyncall\msvc\${{ matrix.arch }}

    - name: Test with dyncall 
      if: github.event.inputs.dotest
      shell: cmd
      run: |
        cd win
        nmake /f makefile.vc OPTS=dyncall INSTALLDIR=${{ env.TCLDIR }} EXTDIR=c:\dyncall\msvc\${{ matrix.arch }} test
      env:
        ERROR_ON_FAILURES: 1


