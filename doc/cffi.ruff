# (c) 2021 Ashok P. Nadkarni
# See LICENSE for license terms.

namespace eval $NS {
    # Leading space intentional to match main content below to not confuse ruff
    variable _ruff_preamble "        This is the reference for commands in the `$::NS` namespace."
    append _ruff_preamble " See the \[Start page\]($::NS.html) for an introductory usage guide."
    append _ruff_preamble { See [Concepts][::Concepts] for a mapping of C types and program elements to the script level.}
    append _ruff_preamble {

        The package is loaded in standard fashion with `package require`:

        ````
        package require cffi
        ````
    }

    proc call {fnptr args} {
        # Invokes a C function through a function pointer.
        #  fnptr - A pointer value tagged with a
        #   [prototype][::Concepts::Prototypes and function pointers]
        #  args - additional arguments to pass to the C function
        #
        # The passed pointer $fnptr tag must corresponding to a function
        # prototype defined through the [prototype function] or
        # [prototype stdcall] commands.
        #
        # Returns the value returned by the invoked C function.
    }

    proc callback {protoname cmdprefix error_value} {
        # Wraps a script level command into a C function
        #  protoname - the name of a prototype created through the
        #    [prototype function] or [prototype stdcall] commands
        #  cmdprefix - the command prefix that should be invoked when the created
        #    C function is called
        #  error_result - the value that should be returned if the command prefix
        #    raises an exception. This is optional if the function prototype
        #    specifies the `void` return type.
        #
        # The returned function pointer can be invoked through the [call] command
        # but the common usage is for it to be passed to
        # a C function that takes a callback function as an argument.
        #
        # Invoking the function pointer will result in $cmdprefix being called
        # with the additional arguments passed in the invocation. These must
        # match the parameter types of the prototype specified in the callback
        # definition. These as well as the return type are restricted to be
        # scalar values and strings. Moreover if the type is a pointer, it must
        # annotated as `unsafe`.
        #
        # When $cmdprefix is called from a C function as a callback, it is executed
        # in the Tcl context from which the C function was called and thus has
        # access to the script level local variables etc.
        #
        # When no longer needed, the callback should be freed with the
        # [callback_free] command.
        #
        # Returns a callback function pointer that can be called from C native code.
        #
    }

    proc callback_free {cb} {
        # Frees a callback pointer
        #  cb - a function pointer allocated with [callback]
    }

    proc limits {type} {
        # Get the lower and upper limits for an integral base type
        #   type - the base type
        # Returns a pair containing the minimum and maximum values
        # for the specified type.
    }
}

namespace eval ${NS}::pkgconfig {
    proc list {} {
        # Returns the list of keys containing information about
        # the package configuration.
    }
    proc get {key} {
        # Gets the value of a configuration key.
        # key - one of the keys returned by [pkgconfig list] command
        #
        # The following keys are supported.
        # `backend` - returns `libffi` or `dyncall` indicating the
        #   backend FFI library in use
        # `version` - the package version
        # `compiler` - identifies the compiler used to build the
        #   extension.
        #
    }
    namespace export *
    namespace ensemble create
}

namespace eval ${NS}::help {
    proc function {FUNCNAME} {
        # Returns a string describing the syntax for a CFFI wrapped function
        #   FUNCNAME - name of a wrapped function
    }

    proc functions {{FUNCPATTERN *}} {
        # Returns a list of CFFI-wrapped functions matching the pattern `FUNCPATTERN`
        #   FUNCPATTERN - glob pattern to match
        #
        # Note that like Tcl's `info commands` the pattern is interpreted relative
        # to the current namespace. So for example, to obtain the list of
        # commands within a namespace, the namespace must also be included
        # in the pattern. For example,
        #
        # ````
        # cffi::help functions ::libzip::*
        # ````
    }

    namespace export *
    namespace ensemble create
}
