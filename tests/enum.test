# (c) 2021 Ashok P. Nadkarni
# See LICENSE for license terms.
#
# Tests for the cffi::type command

source [file join [file dirname [info script]] common.tcl]

namespace eval cffi::test {
    testsubcmd ::cffi::enum
    testnumargs enum-define "cffi::enum define" "ENUM MEMBERS" ""
    testnumargs enum-delete "cffi::enum delete" "PATTERN" ""
    testnumargs enum-list "cffi::enum list" "" "?PATTERN?"
    testnumargs enum-members "cffi::enum members" "ENUM" ""
    testnumargs enum-sequence "cffi::enum sequence" "ENUM MEMBERNAMES" "?START?"
    testnumargs enum-flags "cffi::enum flags" "ENUM FLAGNAMES" ""

    # Only very basic tests. Actual verification is in function.test

    test enum-0 "Define empty enum" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum define E {}
        cffi::enum members E
    } -result {}

    test enum-1 "Define enum" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum define E {a 1 b 2}
        cffi::enum members E
    } -result {a 1 b 2}

    test enum-invalid-value-0 "Define enum - invalid value" -body {
        cffi::enum define E {a abc}
    } -result {expected integer but got "abc"} -returnCodes error

    test enum-invalid-name-0 "Define enum - invalid member name" -body {
        cffi::enum define E {1 2}
    } -result {Invalid value "1". Invalid name syntax.} -returnCodes error

    test enum-invalid-name-1 "Define enum - invalid name" -body {
        cffi::enum define ns::E {a 2}
    } -result {Invalid value "ns::E". Invalid name syntax.} -returnCodes error

    test enum-2 "enum list" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        lsort [cffi::enum list]
    } -result {E E2 X}

    test enum-3 "enum list exact" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        lsort [cffi::enum list E]
    } -result {E}

    test enum-4 "enum list glob" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        lsort [cffi::enum list E*]
    } -result {E E2}

    test enum-5 "enum list empty" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        lsort [cffi::enum list Z*]
    } -result {}

    test enum-6 "enum delete" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        cffi::enum delete E
        lsort [cffi::enum list]
    } -result {E2 X}

    test enum-7 "enum delete glob" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
    } -body {
        cffi::enum delete E*
        cffi::enum list
    } -result {X}

    test enum-8 "enum delete none" -setup {
        cffi::enum delete *
        cffi::enum define E {a 1 b 2}
        cffi::enum define E2 {x 1 y 2}
        cffi::enum define X {}
        cffi::enum list
    } -body {
        cffi::enum delete Z
        lsort [cffi::enum list]
    } -result {E E2 X}

    test enum-9 "Define empty sequence" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum sequence E {}
        cffi::enum members E
    } -result {}

    test enum-10 "Define sequence" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum sequence E {a b}
        cffi::enum members E
    } -result {a 0 b 1}

    test enum-11 "Define sequence start" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum sequence E {a b} 42
        cffi::enum members E
    } -result {a 42 b 43}
    
    test enum-12 "Define flags" -setup {
        cffi::enum delete *
    } -body {
        cffi::enum flags E {a b c}
        cffi::enum members E
    } -result {a 1 b 2 c 4}


    test enum-error-0 "Invalid enum" -body {
        cffi::enum define X {a 1 b}
    } -result {missing value to go with key} -returnCodes error

    test enum-error-1 "Invalid member name in definition" -body {
        cffi::enum define X {1 2 3 4}
    } -result {Invalid value "1". Invalid name syntax.} -returnCodes error

    test enum-error-2 "Invalid member name in sequence" -body {
        cffi::enum sequence X {1 2 3 4}
    } -result {Invalid value "1". Invalid name syntax.} -returnCodes error

    test enum-error-3 "Invalid member name in flags" -body {
        cffi::enum flags X {1 2 3 4}
    } -result {Invalid value "1". Invalid name syntax.} -returnCodes error

    test enum-value-0 "Get first enum member value" -setup {
        cffi::enum delete *
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum value E A
    } -result 1

    test enum-value-1 "Get last enum member value" -setup {
        cffi::enum delete *
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum value E C
    } -result 3

    test enum-value-error-0 "Get missing enum member value" -setup {
        cffi::enum delete *
        namespace eval :: {cffi::enum delete *}
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum value E D
    } -result "Enum member name \"D\" not found or inaccessible. " -returnCodes error
    test enum-value-error-1 "Non-existing enum" -body {
        cffi::enum value X A
    } -result {Enum "X" not found or inaccessible. } -returnCodes error

    test enum-name-0 "Get first enum member name" -setup {
        cffi::enum delete *
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum name E 1
    } -result A

    test enum-name-1 "Get last enum member name" -setup {
        cffi::enum delete *
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum name E 3
    } -result C

    test enum-name-error-0 "Get missing enum member name" -setup {
        cffi::enum delete *
        cffi::enum define E {A 1 B 2 C 3}
    } -body {
        cffi::enum name E 4
    } -result "Enum member value not found. " -returnCodes error

    test enum-name-error-1 "Non-existing enum" -body {
        cffi::enum name X 1
    } -result {Enum "X" not found or inaccessible. } -returnCodes error

    ###
    # Scope based tests
    test enum-value-scope-0 "Local scope overrides global" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define E {a 10 b 20}}
        namespace eval ::ns {cffi::enum value E a}
    } -result 10

    test enum-value-scope-1 "no fallback to global if local enum defined without member" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define E {a 10 b 20}}
        namespace eval ::ns {cffi::enum value E c}
    } -result {Enum member name "c" not found or inaccessible. } -returnCodes error

    test enum-value-scope-2 "Fallback to global, NOT parent" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define E {a 10 b 20}}
        namespace eval ::ns::childns {cffi::enum value E b}
    } -result 2
    
    test enum-name-scope-0 "Local scope overrides global" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define E {x 1 y 2}}
        namespace eval ::ns {cffi::enum name E 1}
    } -result x

    test enum-name-scope-1 "scope falls back to global" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum name E 1}
    } -result a

    test enum-list-scope-0 "enum list in scope" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define X {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define E {a 10 b 20}}
        namespace eval ::ns {cffi::enum list *}
    } -result E

    test enum-members-scope-0 "enum members in scope" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2}}
        namespace eval ::ns {cffi::enum define E {x 10 y 20}}
        namespace eval ::ns {cffi::enum members E}
    } -result {x 10 y 20}

    test enum-members-scope-1 "enum members in scope not found" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2}}
        namespace eval ::ns {cffi::enum members E}
    } -result {Enum "E" not found or inaccessible. } -returnCodes error

    test enum-sequence-scope-0 "Local scope sequence" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum sequence E {a b}}
        namespace eval ::ns {cffi::enum value E a}
    } -result 0

    test enum-flags-scope-0 "Local scope flags" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define E {a 10 b 20 c 30}}
        namespace eval ::ns {cffi::enum flags E {a b}}
        namespace eval ::ns {cffi::enum value E b}
    } -result 2

    test enum-delete-scope-0 "Local scope delete" -setup {
        namespace eval :: {cffi::enum delete *}
        namespace eval ::ns {cffi::enum delete *}
        cffi::enum delete *
    } -body {
        namespace eval :: {cffi::enum define G {a 1 b 2 c 3}}
        namespace eval ::ns {cffi::enum define L {a 0 b 1}}
        list \
            [namespace eval :: {cffi::enum list}] \
            [namespace eval ::ns {cffi::enum list}] \
            [namespace eval ::ns {cffi::enum delete *}] \
            [namespace eval :: {cffi::enum list}] \
            [namespace eval ::ns {cffi::enum list}]
    } -result {G L {} G {}}
}

::tcltest::cleanupTests
namespace delete cffi::test
